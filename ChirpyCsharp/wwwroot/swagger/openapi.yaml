openapi: 3.1.3
info:
  title: Chirpy API
  version: 1.0.0
  description: API specification for the Chirpy backend service. .NET version.
servers:
  - url: http://localhost:5118
    description: Local dev
paths:
  /api/health:
    get:
      tags:
        - Admin
      summary: Health check endpoint
      description: Returns 200 OK if the service is running.
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            text/plain:
              schema:
                type: string
  /api/chirps/{chirpID}:
    get:
      tags:
        - Chirps
      summary: Get a chirp.
      description: Get a single chirp by its ID.
      operationId: getChirpById
      parameters:
        - name: chirpID
          in: path
          description: The ID of the chirp.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The chirp.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "4a13e062-09d8-41b7-8a51-85c85cd4b528"
                  created_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  updated_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  body:
                    type: string
                    example: "Hello, world!"
                  user_id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
        '404':
          description: Chirp not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
        - Chirps
      summary: Delete a chirp
      description: Deletes a chirp by its ID. Requires authentication.
      operationId: deleteChirpById
      security:
        - bearerAuth: []
      parameters:
        - name: chirpID
          in: path
          description: The ID of the chirp.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chirp deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '404':
          description: Chirp not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/chirps:
    post:
      tags:
        - Chirps
      summary: Create a chirp
      description: Validates a chirp (message) and creates it. Requires authentication.
      operationId: createChirp
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  description: The chirp message to validate.
            example:
              body: "Hello, world!"
      responses:
        '201':
          description: Chirp created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "4a13e062-09d8-41b7-8a51-85c85cd4b528"
                  created_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  updated_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  body:
                    type: string
                    example: "Hello, world!"
                  user_id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
        '400':
          description: Invalid request or chirp
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    get:
      tags:
        - Chirps
      summary: Get all chirps.
      description: List all chirps. Order by created at. Optionally filter by author_id. Supports sorting.
      operationId: getAllChirps
      parameters:
        - name: author_id
          in: query
          required: false
          description: Filter chirps by the author's user ID
          schema:
            type: string
        - name: sort
          in: query
          required: false
          description: "Sort order for chirps by created_at. Allowed values: asc (default), desc."
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        '200':
          description: List of chirps
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "4a13e062-09d8-41b7-8a51-85c85cd4b528"
                    created_at:
                      type: string
                      example: "2025-05-15T08:19:18.031988Z"
                    updated_at:
                      type: string
                      example: "2025-05-15T08:19:18.031988Z"
                    body:
                      type: string
                      example: "Hello, world!"
                    user_id:
                      type: string
                      example: "123e4567-e89b-12d3-a456-426614174000"
  /api/users:
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email
                password:
                  type: string
                  description: The user's password
            example:
              email: "user@example.com"
              password: "password123"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  created_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  updated_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  email:
                    type: string
                    example: "user@example.com"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - Users
      summary: Update user
      description: Updates the authenticated user's information. Requires authentication.
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's new email
                password:
                  type: string
                  description: The user's new password
            example:
              email: "newuser@example.com"
              password: "newpassword123"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  created_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  updated_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  email:
                    type: string
                    example: "newuser@example.com"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/login:
    post:
      tags:
        - Login
      summary: Login
      description: Login to the app.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email
                password:
                  type: string
                  description: The user's password
            example:
              email: "user@example.com"
              password: "password123"
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  created_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  updated_at:
                    type: string
                    example: "2025-05-15T08:19:18.031988Z"
                  email:
                    type: string
                    example: "user@example.com"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/refresh:
    post:
      tags:
        - Auth
      summary: Refresh access token
      description: Refreshes the access token using a valid refresh token.
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: The refresh token
            example:
              refresh_token: "some-refresh-token"
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "new-access-token"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/revoke:
    post:
      tags:
        - Auth
      summary: Revoke refresh token
      description: Revokes a refresh token, logging the user out.
      operationId: revokeToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: The refresh token to revoke
            example:
              refresh_token: "some-refresh-token"
      responses:
        '200':
          description: Token revoked
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/polka/webhooks:
    post:
      tags:
        - Webhooks
      summary: Polka webhook for user upgrade
      description: Handles Polka webhook to upgrade user status. Requires Polka API key authentication.
      operationId: polkaWebhook
      security:
        - polkaApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  description: The event type
                data:
                  type: object
                  properties:
                    user_id:
                      type: string
                      description: The user ID to upgrade
            example:
              event: "upgrade"
              data:
                user_id: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '204':
          description: Webhook processed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /admin/metrics:
    get:
      tags:
        - Admin
      summary: Metrics endpoint
      description: Returns internal metrics for the application.
      operationId: getMetrics
      responses:
        '200':
          description: Successful response with metrics
          content:
            text/html:
              schema:
                type: string
  /admin/reset:
    post:
      tags:
        - Admin
      summary: Reset everything
      description: Resets application data. It will only work when PLATFORM is dev.
      operationId: resetApp
      responses:
        '200':
          description: Reset successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    polkaApiKey:
      type: apiKey
      in: header
      name: Authorization
      description: 'Authorization: ApiKey <api-key>'
  responses:
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
security:
  - bearerAuth: []
